name: Packages

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - release*
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-conda:
    name: Build Conda
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Ubuntu packages
        run: |
          sudo apt-get update -y
          sudo apt-get install -y protobuf-compiler
      - name: Install and upgrade python packages
        run: |
          python -m pip install --upgrade pip setuptools==59.4.0 wheel pybind11
          python -m pip uninstall protobuf -y
          python -m pip install --no-binary=protobuf protobuf
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
      - name: Generate package for conda
        id: conda_build
        run: |
          echo "conda pkgs dir $CONDA_PKGS_DIRS"
          conda update conda
          conda install -c conda-forge mamba
          mamba install -c conda-forge conda-build boa conda-verify pybind11
          conda mambabuild --python ${{ matrix.python-version }} . -c defaults -c conda-forge -c numba -c rapidsai -c nvidia --output-folder ./conda_packages
          conda_package=$(find ./conda_packages/ -name "*.tar.bz2")
          export CONDA_PACKAGE=$conda_package
          echo "conda_package : $conda_package"
          echo "conda_package=$conda_package" >> $GITHUB_OUTPUT
      - name: Upload conda artifacts to github
        uses: actions/upload-artifact@v3
        with:
          name: conda-${{ matrix.python-version }}
          path: ${{ steps.conda_build.outputs.conda_package }}

  build-pypi:
    name: Build PyPI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.8]
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Ubuntu packages
        run: |
          sudo apt-get update -y
          sudo apt-get install -y protobuf-compiler
      - name: Install and upgrade python packages
        run: |
          python -m pip install --upgrade pip setuptools==59.4.0 wheel tox pybind11
          python -m pip uninstall protobuf -y
          python -m pip install --no-binary=protobuf protobuf
      - name: Build source package for PyPI
        run: |
          python setup.py sdist
      - name: Check distribution is valid
        run: |
          ./ci/check_dist.sh
      - name: Build wheels for PyPI
        uses: pypa/cibuildwheel@v2.12.0
        env:
          CIBW_SKIP: cp36-* cp37-* pp* # Don't build wheels for 3.6, 3.7, or PyPy
        with:
          output-dir: dist
      - name: Upload PyPI artifacts to Github
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist
      # Build docs, treat warnings as errors
      - name: Building docs
        run: |
          tox -e docs
      - name: Upload HTML
        uses: actions/upload-artifact@v3
        with:
          name: html-build-artifact
          path: docs/build/html
          if-no-files-found: error
          retention-days: 1
      - name: Store PR information
        run: |
          mkdir ./pr
          echo ${{ github.event.number }}              > ./pr/pr.txt
          echo ${{ github.event.pull_request.merged }} > ./pr/merged.txt
          echo ${{ github.event.action }}              > ./pr/action.txt
      - name: Upload PR information
        uses: actions/upload-artifact@v3
        with:
          name: pr
          path: pr/

  release-conda:
    name: Release Conda
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [build-conda]
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/download-artifact@v2
        with:
          name: conda-${{ matrix.python-version }}
          path: conda
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
      - name: Install conda dependencies
        shell: bash -l {0}
        run: |
          conda install -y anaconda-client conda-build
      - name: Push to anaconda
        shell: bash -l {0}
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
        run: |
          anaconda -t $ANACONDA_TOKEN upload -u nvidia conda/*.tar.bz2

  release-pypi:
    name: Release PyPI
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [build-pypi]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      - name: Create GitHub Release
        uses: fnkr/github-action-ghr@v1.3
        env:
          GHR_PATH: ./dist
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Push to PyPi
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install --upgrade wheel pip setuptools twine
          twine upload dist/*
