; For all tests that run in Github Actions, see
; .github/workflows/cpu-ci.yml for the workflow definition.

[tox]
envlist = python3.8,test-gpu,test-cpu
requires = pybind11

[testenv]
commands =
    pip install --upgrade pip
    pip install .
setenv =
    PIP_EXTRA_INDEX_URL=https://pypi.ngc.nvidia.com

[testenv:test-cpu]
; Runs in: Github Actions
; Runs all CPU-based tests. NOTE: if you are using an M1 mac, this will fail. You need to
; change the tensorflow dependency to `tensorflow-macos` in requirements/test-cpu.txt.
deps = -rrequirements/test.txt
commands =
    python -m pip install --upgrade git+https://github.com/NVIDIA-Merlin/core.git@{posargs:main}
    python -m pip install --upgrade git+https://github.com/NVIDIA-Merlin/dataloader.git@{posargs:main}
    python -m pip install --upgrade git+https://github.com/NVIDIA-Merlin/models.git@{posargs:main}
    python -m pip install --upgrade git+https://github.com/NVIDIA-Merlin/core.git@{posargs:main}
    python -m pytest --cov-report term --cov=merlin -rxs tests/unit

[testenv:test-gpu]
setenv =
    TF_GPU_ALLOCATOR=cuda_malloc_async
passenv =
    OPAL_PREFIX
    NR_USER
    CUDA_VISIBLE_DEVICES
sitepackages=true
; Runs in: Internal Jenkins
; Runs GPU-based tests.
; The jenkins jobs run on an image based on merlin-hugectr. This will include all cudf configuration
; and other gpu-specific libraries that we can enxpect will always exist. Thus, we don't need
; to install requirements.txt yet. As we get better at python environment isolation, we will
; need to add some back.
deps =
    pytest
    pytest-cov
commands =
    python -m pip install --upgrade git+https://github.com/NVIDIA-Merlin/core.git
    python -m pip install --upgrade git+https://github.com/NVIDIA-Merlin/dataloader.git
    python -m pip install --upgrade git+https://github.com/NVIDIA-Merlin/models.git
    python -m pip install --upgrade git+https://github.com/NVIDIA-Merlin/core.git@{posargs:main}
    python -m pytest --cov-report term --cov merlin -rxs tests/unit

[testenv:test-merlin]
; Runs in: Internal Jenkins
; This runs the end-to-end tests from the NVIDIA-Merlin/Merlin repo on the jenkins machine.
; We will check out `Merlin` from github and execute the notebooks using the current PR of systems.
passenv=GIT_COMMIT
sitepackages=true
allowlist_externals = git
deps =
    -rrequirements/gpu.txt
commands =
    ; the GIT_COMMIT env is the current commit of the systems repo
    ; NOTE!!!! We must clean this up in the jenkins configuration with `rm -rf "Merlin-$GIT_COMMIT"`
    python -m pip install --upgrade git+https://github.com/NVIDIA-Merlin/core.git
    python -m pip install --upgrade git+https://github.com/NVIDIA-Merlin/dataloader.git
    python -m pip install --upgrade git+https://github.com/NVIDIA-Merlin/models.git
    python -m pip install --upgrade git+https://github.com/NVIDIA-Merlin/systems.git
    python -m pip install --upgrade git+https://github.com/NVIDIA-Merlin/core.git@{posargs:main}
    python -m pip install .

    git clone https://github.com/NVIDIA-Merlin/Merlin.git Merlin-{env:GIT_COMMIT}

    ; this runs the tests then removes the Merlin repo directory whether the tests work or fail
    python -m pytest --cov merlin --cov-report term Merlin-{env:GIT_COMMIT}/tests/unit

[testenv:docs]
; Runs in: Github Actions
; Generates documentation with sphinx. There are other steps in the Github Actions workflow
; to publish the documentation on release.
changedir = {toxinidir}
deps = -rrequirements/docs.txt
commands =
    python -m pip install --upgrade git+https://github.com/NVIDIA-Merlin/core.git
    python -m sphinx.cmd.build -P -b {posargs:html} docs/source docs/build/{posargs:html}

[testenv:docs-multi]
; Run the multi-version build that is shown on GitHub Pages.
changedir = {toxinidir}
deps = -rrequirements/docs.txt
commands =
    python -m pip install --upgrade git+https://github.com/NVIDIA-Merlin/core.git
    sphinx-multiversion --dump-metadata docs/source docs/build/html | jq "keys"
    sphinx-multiversion docs/source docs/build/html

